// // apply plugin: "com.android.application"
// // apply plugin: "org.jetbrains.kotlin.android"
// // apply plugin: "com.facebook.react"
// plugins {
//     id("com.android.application")
//     id("org.jetbrains.kotlin.android")
//     id("com.facebook.react")
// }
// apply from: file("../../node_modules/react-native-vector-icons/fonts.gradle")

// react {
//     // If you add productFlavors, you can list debuggable ones here
//     // debuggableVariants = ["uatDebug", "productionDebug"]
// }

// def enableProguardInReleaseBuilds = false
// def jscFlavor = 'org.webkit:android-jsc:+'

// android {
//     namespace "com.wrotiretailers"

//     ndkVersion rootProject.ext.ndkVersion
//     buildToolsVersion rootProject.ext.buildToolsVersion
//     compileSdk rootProject.ext.compileSdkVersion

//     defaultConfig {
//         applicationId "com.wrotiretailers"
//         minSdkVersion rootProject.ext.minSdkVersion
//         targetSdkVersion rootProject.ext.targetSdkVersion
//         versionCode 1
//         versionName "1.0"
//     }

//     signingConfigs {
//         debug {
//             storeFile file('debug.keystore')
//             storePassword 'android'
//             keyAlias 'androiddebugkey'
//             keyPassword 'android'
//         }
//     }

//     buildTypes {
//         debug {
//             signingConfig signingConfigs.debug
//         }
//         release {
//             // ⚠️ Replace this with your release keystore before publishing
//             signingConfig signingConfigs.debug
//             minifyEnabled enableProguardInReleaseBuilds
//             proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
//         }
//     }

//     // ✅ Use Gradle Toolchain instead of compileOptions
//     java {
//         toolchain {
//             languageVersion = JavaLanguageVersion.of(17)
//         }
//     }
// }

// kotlin {
//     // ✅ Make sure Kotlin also targets Java 17
//     jvmToolchain(17)
// }

// dependencies {
//     // React Native
//     implementation("com.facebook.react:react-android")

//     // JS Engine
//     if (hermesEnabled.toBoolean()) {
//         implementation("com.facebook.react:hermes-android")
//     } else {
//         implementation jscFlavor
//     }
// }

// // Auto-linking for native modules
// apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle")
// applyNativeModulesAppBuildGradle(project)

// apply plugin: "com.android.application"
// apply plugin: "org.jetbrains.kotlin.android"
// apply plugin: "com.facebook.react"
plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
    id("com.facebook.react")
}
apply from: file("../../node_modules/react-native-vector-icons/fonts.gradle")

react {
    // If you add productFlavors, you can list debuggable ones here
    // debuggableVariants = ["uatDebug", "productionDebug"]
}
// ✅ react-native-config setup
project.ext.envConfigFiles = [
    debug: ".env.uat",
    release: ".env.uat",
    uatdebug: ".env.uat",
    uatrelease: ".env.uat",
    productiondebug: ".env.production",
    productionrelease: ".env.production"
]
apply from: project(":react-native-config").projectDir.getPath() + "/dotenv.gradle"

def enableProguardInReleaseBuilds = false
def jscFlavor = 'org.webkit:android-jsc:+'

android {
namespace "com.wrotiretail.app"

    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.wrotiretail.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }

    // ✅ Flavors (based on your old working config + google-services.json)
    flavorDimensions "environment"
    productFlavors {
    uat {
        dimension "environment"
        // Exact applicationId must match the one in google-services.json
        applicationId "com.wrotiretail.app.uat"
        versionCode 36
        versionName "1.9"
        versionNameSuffix "-uat"
        resValue "string", "app_name", "WROTI-UAT"
        resValue "string", "build_config_package", "com.wrotiretail.app"
    }
    production {
        dimension "environment"
        applicationId "com.wrotiretail.app" // matches google-services.json
        versionCode 45
        versionName "3.1.3"
        resValue "string", "app_name", "WROTI"
        resValue "string", "build_config_package", "com.wrotiretail.app"
    }
}

    // productFlavors {
    //     uat {
    //         dimension "environment"
    //         applicationId "com.wrotiretail.app.uat" // must match google-services.json
    //         applicationIdSuffix ".uat"
    //         versionCode 36
    //         versionName "1.9"
    //         versionNameSuffix "-uat"
    //         resValue "string", "app_name", "WROTI-UAT"
    //         resValue "string", "build_config_package", "com.wrotiretail.app"
    //     }
    //     production {
    //         dimension "environment"
    //         applicationId "com.wrotiretail.app"     // must match google-services.json
    //         versionCode 45
    //         versionName "3.1.3"
    //         resValue "string", "app_name", "WROTI"
    //         resValue "string", "build_config_package", "com.wrotiretail.app"
    //     }
    // }


    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // ⚠️ Replace with release keystore before publishing
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }

    // ✅ Use Gradle Toolchain instead of compileOptions
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }
}

kotlin {
    // ✅ Make sure Kotlin also targets Java 17
    jvmToolchain(17)
}

dependencies {
    // React Native
    implementation("com.facebook.react:react-android")
    //-----------------added dependancies--------------------
        // Google Play Core for in-app updates
    implementation "com.google.android.play:core:1.10.3"
    implementation "com.google.android.play:core-ktx:1.8.1"

    // Material Components (for Snackbar)
    implementation "com.google.android.material:material:1.10.0"

    // Optional: Kotlin coroutines if you plan to use suspend functions with Tasks
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.7.3"
    //-----------------added dependancies--------------------
    // JS Engine
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

// Auto-linking for native modules
apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle")
applyNativeModulesAppBuildGradle(project)
// ✅ Firebase Google Services plugin
apply plugin: "com.google.gms.google-services"
